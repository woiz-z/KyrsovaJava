package music.Panel;

import music.Models.MusicTrack;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

/**
 * –ü–∞–Ω–µ–ª—å –ø–æ—à—É–∫—É —Ç—Ä–µ–∫—ñ–≤ —ñ–∑ —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–ª–µ–º —Ç–∞ —ñ–∫–æ–Ω–∫–∞–º–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Å–ø–∏—Å–∫—É –º—É–∑–∏—á–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤.
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î –ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é, –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º –∞–±–æ –∂–∞–Ω—Ä–æ–º —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.
 */
public class TrackSearchPanel extends JPanel {
    private static final Logger logger = LogManager.getLogger(TrackSearchPanel.class);
    final JTextField searchField;
    private final DefaultListModel<MusicTrack> originalModel;
    private final DefaultListModel<MusicTrack> filteredModel;
    private final JList<MusicTrack> trackList;
    List<MusicTrack> allTracks;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–∞–Ω–µ–ª—ñ –ø–æ—à—É–∫—É —Ç—Ä–µ–∫—ñ–≤.
     *
     * @param trackList JList, —è–∫–∏–π –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫—ñ–≤
     * @param listModel –ú–æ–¥–µ–ª—å –¥–∞–Ω–∏—Ö –¥–ª—è —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫—ñ–≤
     */
    public TrackSearchPanel(JList<MusicTrack> trackList, DefaultListModel<MusicTrack> listModel) {
        logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TrackSearchPanel");
        this.trackList = trackList;
        this.originalModel = listModel;
        this.filteredModel = new DefaultListModel<>();
        this.allTracks = new ArrayList<>();
        this.searchField = createSearchField();

        initializeTracks();
        setupLayout();
        setupSearchListener();
        logger.debug("originalModel size: {}, trackList model: {}", originalModel.size(), trackList.getModel().getSize());
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫—ñ–≤ —ñ–∑ –º–æ–¥–µ–ª—ñ.
     */
    void initializeTracks() {
        try {
            allTracks.clear();
            for (int i = 0; i < originalModel.getSize(); i++) {
                allTracks.add(originalModel.get(i));
            }
            logger.debug("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {} —Ç—Ä–µ–∫—ñ–≤", allTracks.size());
        } catch (Exception e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç—Ä–µ–∫—ñ–≤: {}", e.getMessage(), e);
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø–æ–Ω—É–≤–∞–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –ø–æ—à—É–∫—É.
     */
    private void setupLayout() {
        setLayout(new BorderLayout());
        setOpaque(false);
        setBorder(BorderFactory.createEmptyBorder(5, 5, 10, 5));

        JPanel searchPanel = new JPanel(new BorderLayout(5, 0));
        searchPanel.setOpaque(false);

        searchPanel.add(createSearchIcon(), BorderLayout.WEST);
        searchPanel.add(searchField, BorderLayout.CENTER);
        searchPanel.add(createClearButtonPanel(), BorderLayout.EAST);

        add(searchPanel, BorderLayout.CENTER);
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –ø–æ—à—É–∫—É –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º —Å—Ç–∏–ª–µ–º.
     *
     * @return –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ
     */
    JTextField createSearchField() {
        JTextField field = new JTextField(20) {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(new Color(255, 255, 255, 220));
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 15, 15);
                super.paintComponent(g);

                if (getText().isEmpty() && !hasFocus()) {
                    g2.setColor(new Color(150, 150, 150, 150));
                    g2.setFont(getFont().deriveFont(Font.ITALIC));
                    FontMetrics fm = g2.getFontMetrics();
                    int y = (getHeight() - fm.getHeight()) / 2 + fm.getAscent();
                    g2.drawString("–ü–æ—à—É–∫ —Ç—Ä–µ–∫—ñ–≤...", 23, y);
                }
            }

            @Override
            protected void paintBorder(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(isFocusOwner() ? new Color(70, 130, 180) : new Color(200, 200, 200));
                g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, 15, 15);
            }
        };

        field.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        field.setForeground(new Color(50, 50, 50));
        field.setBorder(BorderFactory.createEmptyBorder(8, 15, 8, 15));
        field.setOpaque(false);
        return field;
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ –ø–æ—à—É–∫—É.
     *
     * @return JLabel –∑ —ñ–∫–æ–Ω–∫–æ—é –ø–æ—à—É–∫—É
     */
    JLabel createSearchIcon() {
        JLabel searchIcon = new JLabel("üîç") {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(new Color(150, 150, 150));
                g2.setFont(getFont().deriveFont(16f));
                FontMetrics fm = g2.getFontMetrics();
                int y = (getHeight() - fm.getHeight()) / 2 + fm.getAscent();
                g2.drawString("üîç", 0, y);
            }
        };
        searchIcon.setPreferredSize(new Dimension(30, 30));
        searchIcon.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 5));
        searchIcon.setOpaque(false);
        return searchIcon;
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è –ø–æ—à—É–∫—É.
     *
     * @return JPanel —ñ–∑ –∫–Ω–æ–ø–∫–æ—é –æ—á–∏—â–µ–Ω–Ω—è
     */
    JPanel createClearButtonPanel() {
        JButton clearButton = new JButton("√ó") {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                int size = Math.min(getWidth(), getHeight());
                g2.setColor(getModel().isRollover() ? new Color(220, 220, 220) : new Color(240, 240, 240));
                g2.fillOval(0, 5, size - 1, size - 1);
                g2.setColor(new Color(120, 120, 120));
                g2.setFont(getFont().deriveFont(Font.BOLD, 14f));
                FontMetrics fm = g2.getFontMetrics();
                int x = (size - fm.stringWidth("√ó")) / 2;
                int y = (size - fm.getHeight()) / 2 + fm.getAscent();
                g2.drawString("√ó", x, y + 5);
            }

            @Override
            protected void paintBorder(Graphics g) {
                // –ë–µ–∑ —Ä–∞–º–∫–∏
            }
        };

        clearButton.setPreferredSize(new Dimension(24, 24));
        clearButton.setMaximumSize(new Dimension(24, 24));
        clearButton.setContentAreaFilled(false);
        clearButton.setOpaque(false);
        clearButton.setFocusPainted(false);
        clearButton.setBorder(BorderFactory.createEmptyBorder());
        clearButton.addActionListener(e -> {
            logger.info("–û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è –ø–æ—à—É–∫—É");
            searchField.setText("");
            searchField.requestFocus();
        });

        JPanel rightPanel = new JPanel(new BorderLayout());
        rightPanel.setOpaque(false);
        rightPanel.add(clearButton, BorderLayout.EAST);
        return rightPanel;
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á–∞ –ø–æ–¥—ñ–π –¥–ª—è –ø–æ—à—É–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.
     */
    void setupSearchListener() {
        searchField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                filterTracks();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                filterTracks();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                filterTracks();
            }
        });
    }

    /**
     * –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç—Ä–µ–∫—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–∫—Å—Ç—É –ø–æ—à—É–∫—É.
     */
    void filterTracks() {
        try {
            String searchText = searchField.getText().trim().toLowerCase();
            filteredModel.clear();
            logger.debug("–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç—Ä–µ–∫—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º: '{}', –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–∫—ñ–≤ —É allTracks: {}", searchText, allTracks.size());

            if (searchText.isEmpty()) {
                trackList.setModel(originalModel);
                trackList.repaint();
                trackList.revalidate();
                logger.info("–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç, –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ –≤—Å—ñ —Ç—Ä–µ–∫–∏: {}", originalModel.size());
            } else {
                for (MusicTrack track : allTracks) {
                    if (matchesSearch(track, searchText)) {
                        filteredModel.addElement(track);
                    }
                }
                trackList.setModel(filteredModel);
                trackList.repaint();
                trackList.revalidate();
                logger.info("–ó–Ω–∞–π–¥–µ–Ω–æ {} —Ç—Ä–µ–∫—ñ–≤", filteredModel.size());
            }
        } catch (Exception e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {}", e.getMessage(), e);
            JOptionPane.showMessageDialog(null, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É —Ç—Ä–µ–∫—ñ–≤", "–ü–æ–º–∏–ª–∫–∞", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç—Ä–µ–∫ –ø–æ—à—É–∫–æ–≤–æ–º—É –∑–∞–ø–∏—Ç—É.
     *
     * @param track      –¢—Ä–µ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * @param searchText –¢–µ–∫—Å—Ç –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
     * @return true, —è–∫—â–æ —Ç—Ä–µ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞–ø–∏—Ç—É
     */
    boolean matchesSearch(MusicTrack track, String searchText) {
        try {
            if (track == null) {
                logger.warn("–¢—Ä–µ–∫ —î null");
                return false;
            }
            String title = track.getTitle() != null ? track.getTitle().toLowerCase() : "";
            String artist = track.getArtist() != null ? track.getArtist().toLowerCase() : "";
            String genre = track.getGenre() != null ? track.getGenre().toString().toLowerCase() : "";
            boolean matches = title.contains(searchText) ||
                    artist.contains(searchText) ||
                    genre.contains(searchText);
            logger.trace("–¢—Ä–µ–∫ {}: title='{}', artist='{}', genre='{}', –∑–±—ñ–≥={}",
                    track.getTitle(), title, artist, genre, matches);
            return matches;
        } catch (Exception e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç—Ä–µ–∫—É {}: {}", track != null ? track.getTitle() : "null", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫—ñ–≤.
     *
     * @param tracks –ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫—ñ–≤
     */
    public void updateTrackList(List<MusicTrack> tracks) {
        try {
            logger.info("–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫—ñ–≤: {}", tracks.size());
            allTracks = new ArrayList<>(tracks);
            filterTracks();
        } catch (Exception e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–µ–∫—ñ–≤: {}", e.getMessage(), e);
        }
    }
}
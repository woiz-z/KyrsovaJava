package music.Panel;

import music.Music.MusicCompilation;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

/**
 * –ü–∞–Ω–µ–ª—å –ø–æ—à—É–∫—É –º—É–∑–∏—á–Ω–∏—Ö –∑–±—ñ—Ä–æ–∫ —ñ–∑ —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–ª–µ–º –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Å–ø–∏—Å–∫—É.
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î –ø–æ—à—É–∫ —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ, —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–µ –ø–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è –∑ —ñ–∫–æ–Ω–∫–æ—é —Ç–∞ –∫–Ω–æ–ø–∫–æ—é –æ—á–∏—â–µ–Ω–Ω—è.
 */
public class CompilationSearchPanel extends JPanel {
    private static final Logger logger = LogManager.getLogger(CompilationSearchPanel.class);
    private final JTextField searchField;
    private final DefaultListModel<MusicCompilation> originalModel;
    private final DefaultListModel<MusicCompilation> filteredModel;
    private final JList<MusicCompilation> compilationList;
    private List<MusicCompilation> allCompilations;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–∞–Ω–µ–ª—ñ –ø–æ—à—É–∫—É.
     *
     * @param compilationList –°–ø–∏—Å–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±—ñ—Ä–æ–∫.
     * @param listModel       –ú–æ–¥–µ–ª—å –¥–∞–Ω–∏—Ö –¥–ª—è —Å–ø–∏—Å–∫—É –∑–±—ñ—Ä–æ–∫.
     */
    public CompilationSearchPanel(JList<MusicCompilation> compilationList, DefaultListModel<MusicCompilation> listModel) {
        logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞–Ω–µ–ª—ñ –ø–æ—à—É–∫—É –∑–±—ñ—Ä–æ–∫");
        this.compilationList = compilationList;
        this.originalModel = listModel;
        this.filteredModel = new DefaultListModel<>();
        this.allCompilations = new ArrayList<>();
        this.searchField = createSearchField();

        initializeCompilations();
        setupLayout();
        addSearchListener();
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∑–±—ñ—Ä–æ–∫ —ñ–∑ –º–æ–¥–µ–ª—ñ.
     */
    private void initializeCompilations() {
        try {
            for (int i = 0; i < originalModel.getSize(); i++) {
                allCompilations.add(originalModel.get(i));
            }
            logger.debug("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {} –∑–±—ñ—Ä–æ–∫", allCompilations.size());
        } catch (Exception e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–±—ñ—Ä–æ–∫: {}", e.getMessage(), e);
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –∫–æ–º–ø–æ–Ω—É–≤–∞–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –ø–æ—à—É–∫—É.
     */
    private void setupLayout() {
        setLayout(new BorderLayout());
        setOpaque(false);
        setBorder(BorderFactory.createEmptyBorder(5, 5, 10, 5));

        JPanel searchPanel = new JPanel(new BorderLayout(5, 0));
        searchPanel.setOpaque(false);

        JLabel searchIcon = createSearchIcon();
        JButton clearButton = createClearButton();

        JPanel rightPanel = new JPanel(new BorderLayout());
        rightPanel.setOpaque(false);
        rightPanel.add(clearButton, BorderLayout.EAST);

        searchPanel.add(searchIcon, BorderLayout.WEST);
        searchPanel.add(searchField, BorderLayout.CENTER);
        searchPanel.add(rightPanel, BorderLayout.EAST);

        add(searchPanel, BorderLayout.CENTER);
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–µ –ø–æ–ª–µ –ø–æ—à—É–∫—É.
     *
     * @return –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ.
     */
    private JTextField createSearchField() {
        JTextField field = new JTextField(20) {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(new Color(255, 255, 255, 220));
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 15, 15);
                super.paintComponent(g);

                if (getText().isEmpty() && !hasFocus()) {
                    g2.setColor(new Color(150, 150, 150, 150));
                    g2.setFont(getFont().deriveFont(Font.ITALIC));
                    FontMetrics fm = g2.getFontMetrics();
                    int y = (getHeight() - fm.getHeight()) / 2 + fm.getAscent();
                    g2.drawString("–ü–æ—à—É–∫ –∑–±—ñ—Ä–æ–∫...", 23, y);
                }
            }

            @Override
            protected void paintBorder(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(isFocusOwner() ? new Color(70, 130, 180) : new Color(200, 200, 200));
                g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, 15, 15);
            }
        };

        field.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        field.setForeground(new Color(50, 50, 50));
        field.setBorder(BorderFactory.createEmptyBorder(8, 15, 8, 15));
        field.setOpaque(false);
        return field;
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î —ñ–∫–æ–Ω–∫—É –ø–æ—à—É–∫—É.
     *
     * @return –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ —ñ–∫–æ–Ω–∫–∞.
     */
    private JLabel createSearchIcon() {
        JLabel icon = new JLabel("üîç") {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(new Color(150, 150, 150));
                g2.setFont(getFont().deriveFont(16f));
                FontMetrics fm = g2.getFontMetrics();
                int y = (getHeight() - fm.getHeight()) / 2 + fm.getAscent();
                g2.drawString("üîç", 0, y);
            }
        };
        icon.setPreferredSize(new Dimension(30, 30));
        icon.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 5));
        icon.setOpaque(false);
        return icon;
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î –∫–Ω–æ–ø–∫—É –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è –ø–æ—à—É–∫—É.
     *
     * @return –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞.
     */
    private JButton createClearButton() {
        JButton button = new JButton("√ó") {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                int size = Math.min(getWidth(), getHeight());
                g2.setColor(getModel().isRollover() ? new Color(220, 220, 220) : new Color(240, 240, 240));
                g2.fillOval(0, 5, size - 1, size - 1);
                g2.setColor(new Color(120, 120, 120));
                g2.setFont(getFont().deriveFont(Font.BOLD, 14f));
                FontMetrics fm = g2.getFontMetrics();
                int x = (size - fm.stringWidth("√ó")) / 2;
                int y = (size - fm.getHeight()) / 2 + fm.getAscent();
                g2.drawString("√ó", x, y + 5);
            }

            @Override
            protected void paintBorder(Graphics g) {
                // –ë–µ–∑ —Ä–∞–º–∫–∏
            }
        };
        button.setPreferredSize(new Dimension(24, 24));
        button.setMaximumSize(new Dimension(24, 24));
        button.setContentAreaFilled(false);
        button.setOpaque(false);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createEmptyBorder());
        button.addActionListener(e -> {
            logger.info("–û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è –ø–æ—à—É–∫—É");
            searchField.setText("");
            searchField.requestFocus();
        });
        return button;
    }

    /**
     * –î–æ–¥–∞—î —Å–ª—É—Ö–∞—á –¥–ª—è –ø–æ—à—É–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.
     */
    private void addSearchListener() {
        searchField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                filterCompilations();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                filterCompilations();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                filterCompilations();
            }
        });
    }

    /**
     * –§—ñ–ª—å—Ç—Ä—É—î —Å–ø–∏—Å–æ–∫ –∑–±—ñ—Ä–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–∫—Å—Ç—É –ø–æ—à—É–∫—É.
     */
    private void filterCompilations() {
        try {
            String searchText = searchField.getText().toLowerCase();
            filteredModel.clear();

            if (searchText.isEmpty()) {
                compilationList.setModel(originalModel);
                logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –≤—Å—ñ –∑–±—ñ—Ä–∫–∏ (–ø–æ—Ä–æ–∂–Ω—ñ–π –ø–æ—à—É–∫)");
            } else {
                for (MusicCompilation compilation : allCompilations) {
                    if (matchesSearch(compilation, searchText)) {
                        filteredModel.addElement(compilation);
                    }
                }
                compilationList.setModel(filteredModel);
                logger.info("–ó–Ω–∞–π–¥–µ–Ω–æ {} –∑–±—ñ—Ä–æ–∫ –∑–∞ –ø–æ—à—É–∫–æ–≤–∏–º –∑–∞–ø–∏—Ç–æ–º", filteredModel.size());
            }
        } catch (Exception e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–±—ñ—Ä–æ–∫: {}", e.getMessage(), e);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–±—ñ—Ä–∫–∞ –ø–æ—à—É–∫–æ–≤–æ–º—É –∑–∞–ø–∏—Ç—É.
     *
     * @param compilation –ó–±—ñ—Ä–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.
     * @param searchText  –¢–µ–∫—Å—Ç –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É.
     * @return true, —è–∫—â–æ –∑–±—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞–ø–∏—Ç—É.
     */
    private boolean matchesSearch(MusicCompilation compilation, String searchText) {
        try {
            return compilation.getTitle().toLowerCase().contains(searchText) ||
                    String.valueOf(compilation.getTracks().size()).contains(searchText);
        } catch (Exception e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∑–±—ñ—Ä–∫–∏: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –∑–±—ñ—Ä–æ–∫ —ñ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä.
     *
     * @param compilations –ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –∑–±—ñ—Ä–æ–∫.
     */
    public void updateCompilationList(List<MusicCompilation> compilations) {
        try {
            allCompilations = new ArrayList<>(compilations);
            logger.info("–û–Ω–æ–≤–ª–µ–Ω–æ —Å–ø–∏—Å–æ–∫ –∑–±—ñ—Ä–æ–∫, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {}", allCompilations.size());
            filterCompilations();
        } catch (Exception e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∑–±—ñ—Ä–æ–∫: {}", e.getMessage(), e);
        }
    }
}